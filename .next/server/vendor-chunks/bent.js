"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bent";
exports.ids = ["vendor-chunks/bent"];
exports.modules = {

/***/ "(rsc)/./node_modules/bent/src/core.js":
/*!***************************************!*\
  !*** ./node_modules/bent/src/core.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmVudC9zcmMvY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxJQUFJLG1CQUFtQixPQUFPO0FBQzNFO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDViwrQ0FBK0MsSUFBSTtBQUNuRDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTix1Q0FBdUMsV0FBVztBQUNsRDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2R4dy1haS1sYW5ndWFnZS10ZWFjaGVyLy4vbm9kZV9tb2R1bGVzL2JlbnQvc3JjL2NvcmUuanM/YzdkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbmNvbnN0IGVuY29kaW5ncyA9IG5ldyBTZXQoWydqc29uJywgJ2J1ZmZlcicsICdzdHJpbmcnXSlcblxubW9kdWxlLmV4cG9ydHMgPSBta3JlcXVlc3QgPT4gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3Qgc3RhdHVzQ29kZXMgPSBuZXcgU2V0KClcbiAgbGV0IG1ldGhvZFxuICBsZXQgZW5jb2RpbmdcbiAgbGV0IGhlYWRlcnNcbiAgbGV0IGJhc2V1cmwgPSAnJ1xuXG4gIGFyZ3MuZm9yRWFjaChhcmcgPT4ge1xuICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGFyZy50b1VwcGVyQ2FzZSgpID09PSBhcmcpIHtcbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgIGNvbnN0IG1zZyA9IGBDYW4ndCBzZXQgbWV0aG9kIHRvICR7YXJnfSwgYWxyZWFkeSBzZXQgdG8gJHttZXRob2R9LmBcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1ldGhvZCA9IGFyZ1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZy5zdGFydHNXaXRoKCdodHRwOicpIHx8IGFyZy5zdGFydHNXaXRoKCdodHRwczonKSkge1xuICAgICAgICBiYXNldXJsID0gYXJnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZW5jb2RpbmdzLmhhcyhhcmcpKSB7XG4gICAgICAgICAgZW5jb2RpbmcgPSBhcmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZW5jb2RpbmcsICR7YXJnfWApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgICBzdGF0dXNDb2Rlcy5hZGQoYXJnKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykgfHwgYXJnIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgIGFyZy5mb3JFYWNoKGNvZGUgPT4gc3RhdHVzQ29kZXMuYWRkKGNvZGUpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGhlYWRlcnMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgaGVhZGVycyB0d2ljZS4nKVxuICAgICAgICB9XG4gICAgICAgIGhlYWRlcnMgPSBhcmdcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHR5cGU6ICR7dHlwZW9mIGFyZ31gKVxuICAgIH1cbiAgfSlcblxuICBpZiAoIW1ldGhvZCkgbWV0aG9kID0gJ0dFVCdcbiAgaWYgKHN0YXR1c0NvZGVzLnNpemUgPT09IDApIHtcbiAgICBzdGF0dXNDb2Rlcy5hZGQoMjAwKVxuICB9XG5cbiAgcmV0dXJuIG1rcmVxdWVzdChzdGF0dXNDb2RlcywgbWV0aG9kLCBlbmNvZGluZywgaGVhZGVycywgYmFzZXVybClcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bent/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/bent/src/nodejs.js":
/*!*****************************************!*\
  !*** ./node_modules/bent/src/nodejs.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\")\nconst https = __webpack_require__(/*! https */ \"https\")\nconst { URL } = __webpack_require__(/*! url */ \"url\")\nconst isStream = __webpack_require__(/*! is-stream */ \"(rsc)/./node_modules/is-stream/index.js\")\nconst caseless = __webpack_require__(/*! caseless */ \"(rsc)/./node_modules/caseless/index.js\")\nconst bytes = __webpack_require__(/*! bytesish */ \"(rsc)/./node_modules/bytesish/node.js\")\nconst bent = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/bent/src/core.js\")\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\")\nconst { PassThrough } = __webpack_require__(/*! stream */ \"stream\")\n\nconst compression = {}\n\n/* istanbul ignore else */\nif (zlib.createBrotliDecompress) compression.br = () => zlib.createBrotliDecompress()\n/* istanbul ignore else */\nif (zlib.createGunzip) compression.gzip = () => zlib.createGunzip()\n/* istanbul ignore else */\nif (zlib.createInflate) compression.deflate = () => zlib.createInflate()\n\nconst acceptEncoding = Object.keys(compression).join(', ')\n\nconst getResponse = resp => {\n  const ret = new PassThrough()\n  ret.statusCode = resp.statusCode\n  ret.status = resp.statusCode\n  ret.statusMessage = resp.statusMessage\n  ret.headers = resp.headers\n  ret._response = resp\n  if (ret.headers['content-encoding']) {\n    const encodings = ret.headers['content-encoding'].split(', ').reverse()\n    while (encodings.length) {\n      const enc = encodings.shift()\n      if (compression[enc]) {\n        const decompress = compression[enc]()\n        decompress.on('error', (e) => ret.emit('error', new Error('ZBufError', e)))\n        resp = resp.pipe(decompress)\n      } else {\n        break\n      }\n    }\n  }\n  return resp.pipe(ret)\n}\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    Error.captureStackTrace(this, StatusError)\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.statusCode\n    this.json = res.json\n    this.text = res.text\n    this.arrayBuffer = res.arrayBuffer\n    this.headers = res.headers\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n  }\n}\n\nconst getBuffer = stream => new Promise((resolve, reject) => {\n  const parts = []\n  stream.on('error', reject)\n  stream.on('end', () => resolve(Buffer.concat(parts)))\n  stream.on('data', d => parts.push(d))\n})\n\nconst decodings = res => {\n  let _buffer\n  res.arrayBuffer = () => {\n    if (!_buffer) {\n      _buffer = getBuffer(res)\n      return _buffer\n    } else {\n      throw new Error('body stream is locked')\n    }\n  }\n  res.text = () => res.arrayBuffer().then(buff => buff.toString())\n  res.json = async () => {\n    const str = await res.text()\n    try {\n      return JSON.parse(str)\n    } catch (e) {\n      e.message += `str\"${str}\"`\n      throw e\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => (_url, body = null, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  const parsed = new URL(_url)\n  let h\n  if (parsed.protocol === 'https:') {\n    h = https\n  } else if (parsed.protocol === 'http:') {\n    h = http\n  } else {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n  const request = {\n    path: parsed.pathname + parsed.search,\n    port: parsed.port,\n    method: method,\n    headers: { ...(headers || {}), ..._headers },\n    hostname: parsed.hostname\n  }\n  if (parsed.username || parsed.password) {\n    request.auth = [parsed.username, parsed.password].join(':')\n  }\n  const c = caseless(request.headers)\n  if (encoding === 'json') {\n    if (!c.get('accept')) {\n      c.set('accept', 'application/json')\n    }\n  }\n  if (!c.has('accept-encoding')) {\n    c.set('accept-encoding', acceptEncoding)\n  }\n  return new Promise((resolve, reject) => {\n    const req = h.request(request, async res => {\n      res = getResponse(res)\n      res.on('error', reject)\n      decodings(res)\n      res.status = res.statusCode\n      if (!statusCodes.has(res.statusCode)) {\n        return reject(new StatusError(res))\n      }\n\n      if (!encoding) return resolve(res)\n      else {\n        /* istanbul ignore else */\n        if (encoding === 'buffer') {\n          resolve(res.arrayBuffer())\n        } else if (encoding === 'json') {\n          resolve(res.json())\n        } else if (encoding === 'string') {\n          resolve(res.text())\n        }\n      }\n    })\n    req.on('error', reject)\n    if (body) {\n      if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n        body = bytes.native(body)\n      }\n      if (Buffer.isBuffer(body)) {\n        // noop\n      } else if (typeof body === 'string') {\n        body = Buffer.from(body)\n      } else if (isStream(body)) {\n        body.pipe(req)\n        body = null\n      } else if (typeof body === 'object') {\n        if (!c.has('content-type')) {\n          req.setHeader('content-type', 'application/json')\n        }\n        body = Buffer.from(JSON.stringify(body))\n      } else {\n        reject(new Error('Unknown body type.'))\n      }\n      if (body) {\n        req.setHeader('content-length', body.length)\n        req.end(body)\n      }\n    } else {\n      req.end()\n    }\n  })\n}\n\nmodule.exports = bent(mkrequest)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bent/src/nodejs.js\n");

/***/ })

};
;