/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/https-proxy-agent";
exports.ids = ["vendor-chunks/https-proxy-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/https-proxy-agent/index.js":
/*!*************************************************!*\
  !*** ./node_modules/https-proxy-agent/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar net = __webpack_require__(/*! net */ \"net\");\nvar tls = __webpack_require__(/*! tls */ \"tls\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Agent = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/index.js\");\nvar inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('https-proxy-agent');\n\n/**\n * Module exports.\n */\n\nmodule.exports = HttpsProxyAgent;\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to the\n * specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * @api public\n */\n\nfunction HttpsProxyAgent(opts) {\n\tif (!(this instanceof HttpsProxyAgent)) return new HttpsProxyAgent(opts);\n\tif ('string' == typeof opts) opts = url.parse(opts);\n\tif (!opts)\n\t\tthrow new Error(\n\t\t\t'an HTTP(S) proxy server `host` and `port` must be specified!'\n\t\t);\n\tdebug('creating new HttpsProxyAgent instance: %o', opts);\n\tAgent.call(this, opts);\n\n\tvar proxy = Object.assign({}, opts);\n\n\t// if `true`, then connect to the proxy server over TLS. defaults to `false`.\n\tthis.secureProxy = proxy.protocol\n\t\t? /^https:?$/i.test(proxy.protocol)\n\t\t: false;\n\n\t// prefer `hostname` over `host`, and set the `port` if needed\n\tproxy.host = proxy.hostname || proxy.host;\n\tproxy.port = +proxy.port || (this.secureProxy ? 443 : 80);\n\n\t// ALPN is supported by Node.js >= v5.\n\t// attempt to negotiate http/1.1 for proxy servers that support http/2\n\tif (this.secureProxy && !('ALPNProtocols' in proxy)) {\n\t\tproxy.ALPNProtocols = ['http 1.1'];\n\t}\n\n\tif (proxy.host && proxy.path) {\n\t\t// if both a `host` and `path` are specified then it's most likely the\n\t\t// result of a `url.parse()` call... we need to remove the `path` portion so\n\t\t// that `net.connect()` doesn't attempt to open that as a unix socket file.\n\t\tdelete proxy.path;\n\t\tdelete proxy.pathname;\n\t}\n\n\tthis.proxy = proxy;\n}\ninherits(HttpsProxyAgent, Agent);\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nHttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\n\tvar proxy = this.proxy;\n\n\t// create a socket connection to the proxy server\n\tvar socket;\n\tif (this.secureProxy) {\n\t\tsocket = tls.connect(proxy);\n\t} else {\n\t\tsocket = net.connect(proxy);\n\t}\n\n\t// we need to buffer any HTTP traffic that happens with the proxy before we get\n\t// the CONNECT response, so that if the response is anything other than an \"200\"\n\t// response code, then we can re-play the \"data\" events on the socket once the\n\t// HTTP parser is hooked up...\n\tvar buffers = [];\n\tvar buffersLength = 0;\n\n\tfunction read() {\n\t\tvar b = socket.read();\n\t\tif (b) ondata(b);\n\t\telse socket.once('readable', read);\n\t}\n\n\tfunction cleanup() {\n\t\tsocket.removeListener('end', onend);\n\t\tsocket.removeListener('error', onerror);\n\t\tsocket.removeListener('close', onclose);\n\t\tsocket.removeListener('readable', read);\n\t}\n\n\tfunction onclose(err) {\n\t\tdebug('onclose had error %o', err);\n\t}\n\n\tfunction onend() {\n\t\tdebug('onend');\n\t}\n\n\tfunction onerror(err) {\n\t\tcleanup();\n\t\tfn(err);\n\t}\n\n\tfunction ondata(b) {\n\t\tbuffers.push(b);\n\t\tbuffersLength += b.length;\n\t\tvar buffered = Buffer.concat(buffers, buffersLength);\n\t\tvar str = buffered.toString('ascii');\n\n\t\tif (!~str.indexOf('\\r\\n\\r\\n')) {\n\t\t\t// keep buffering\n\t\t\tdebug('have not received end of HTTP headers yet...');\n\t\t\tread();\n\t\t\treturn;\n\t\t}\n\n\t\tvar firstLine = str.substring(0, str.indexOf('\\r\\n'));\n\t\tvar statusCode = +firstLine.split(' ')[1];\n\t\tdebug('got proxy server response: %o', firstLine);\n\n\t\tif (200 == statusCode) {\n\t\t\t// 200 Connected status code!\n\t\t\tvar sock = socket;\n\n\t\t\t// nullify the buffered data since we won't be needing it\n\t\t\tbuffers = buffered = null;\n\n\t\t\tif (opts.secureEndpoint) {\n\t\t\t\t// since the proxy is connecting to an SSL server, we have\n\t\t\t\t// to upgrade this socket connection to an SSL connection\n\t\t\t\tdebug(\n\t\t\t\t\t'upgrading proxy-connected socket to TLS connection: %o',\n\t\t\t\t\topts.host\n\t\t\t\t);\n\t\t\t\topts.socket = socket;\n\t\t\t\topts.servername = opts.servername || opts.host;\n\t\t\t\topts.host = null;\n\t\t\t\topts.hostname = null;\n\t\t\t\topts.port = null;\n\t\t\t\tsock = tls.connect(opts);\n\t\t\t}\n\n\t\t\tcleanup();\n\t\t\treq.once('socket', resume);\n\t\t\tfn(null, sock);\n\t\t} else {\n\t\t\t// some other status code that's not 200... need to re-play the HTTP header\n\t\t\t// \"data\" events onto the socket once the HTTP machinery is attached so\n\t\t\t// that the node core `http` can parse and handle the error status code\n\t\t\tcleanup();\n\n\t\t\t// the original socket is closed, and a new closed socket is\n\t\t\t// returned instead, so that the proxy doesn't get the HTTP request\n\t\t\t// written to it (which may contain `Authorization` headers or other\n\t\t\t// sensitive data).\n\t\t\t//\n\t\t\t// See: https://hackerone.com/reports/541502\n\t\t\tsocket.destroy();\n\t\t\tsocket = new net.Socket();\n\t\t\tsocket.readable = true;\n\n\t\t\t// save a reference to the concat'd Buffer for the `onsocket` callback\n\t\t\tbuffers = buffered;\n\n\t\t\t// need to wait for the \"socket\" event to re-play the \"data\" events\n\t\t\treq.once('socket', onsocket);\n\n\t\t\tfn(null, socket);\n\t\t}\n\t}\n\n\tfunction onsocket(socket) {\n\t\tdebug('replaying proxy buffer for failed request');\n\t\tassert(socket.listenerCount('data') > 0);\n\n\t\t// replay the \"buffers\" Buffer onto the `socket`, since at this point\n\t\t// the HTTP module machinery has been hooked up for the user\n\t\tsocket.push(buffers);\n\n\t\t// nullify the cached Buffer instance\n\t\tbuffers = null;\n\t}\n\n\tsocket.on('error', onerror);\n\tsocket.on('close', onclose);\n\tsocket.on('end', onend);\n\n\tread();\n\n\tvar hostname = opts.host + ':' + opts.port;\n\tvar msg = 'CONNECT ' + hostname + ' HTTP/1.1\\r\\n';\n\n\tvar headers = Object.assign({}, proxy.headers);\n\tif (proxy.auth) {\n\t\theaders['Proxy-Authorization'] =\n\t\t\t'Basic ' + Buffer.from(proxy.auth).toString('base64');\n\t}\n\n\t// the Host header should only include the port\n\t// number when it is a non-standard port\n\tvar host = opts.host;\n\tif (!isDefaultPort(opts.port, opts.secureEndpoint)) {\n\t\thost += ':' + opts.port;\n\t}\n\theaders['Host'] = host;\n\n\theaders['Connection'] = 'close';\n\tObject.keys(headers).forEach(function(name) {\n\t\tmsg += name + ': ' + headers[name] + '\\r\\n';\n\t});\n\n\tsocket.write(msg + '\\r\\n');\n};\n\n/**\n * Resumes a socket.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket to resume\n * @api public\n */\n\nfunction resume(socket) {\n\tsocket.resume();\n}\n\nfunction isDefaultPort(port, secure) {\n\treturn Boolean((!secure && port === 80) || (secure && port === 443));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/https-proxy-agent/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/index.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst promisify_1 = __importDefault(__webpack_require__(/*! ./promisify */ \"(rsc)/./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/promisify.js\"));\nfunction isAgentBase(v) {\n    return Boolean(v) && typeof v.addRequest === 'function';\n}\nfunction isHttpAgent(v) {\n    return Boolean(v) && typeof v.addRequest === 'function';\n}\nfunction isSecureEndpoint() {\n    const { stack } = new Error();\n    if (typeof stack !== 'string')\n        return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1);\n}\nfunction createAgent(callback, opts) {\n    return new createAgent.Agent(callback, opts);\n}\n(function (createAgent) {\n    /**\n     * Base `http.Agent` implementation.\n     * No pooling/keep-alive is implemented by default.\n     *\n     * @param {Function} callback\n     * @api public\n     */\n    class Agent extends events_1.EventEmitter {\n        constructor(callback, _opts) {\n            super();\n            // The callback gets promisified lazily\n            this.promisifiedCallback = undefined;\n            let opts = _opts;\n            if (typeof callback === 'function') {\n                this.callback = callback;\n            }\n            else if (callback) {\n                opts = callback;\n            }\n            // timeout for the socket to be returned from the callback\n            this.timeout = null;\n            if (opts && typeof opts.timeout === 'number') {\n                this.timeout = opts.timeout;\n            }\n            this.options = opts || {};\n            this.maxFreeSockets = 1;\n            this.maxSockets = 1;\n            this.sockets = [];\n            this.requests = [];\n        }\n        get defaultPort() {\n            if (typeof this.explicitDefaultPort === 'number') {\n                return this.explicitDefaultPort;\n            }\n            else {\n                return isSecureEndpoint() ? 443 : 80;\n            }\n        }\n        set defaultPort(v) {\n            this.explicitDefaultPort = v;\n        }\n        get protocol() {\n            if (typeof this.explicitProtocol === 'string') {\n                return this.explicitProtocol;\n            }\n            else {\n                return isSecureEndpoint() ? 'https:' : 'http:';\n            }\n        }\n        set protocol(v) {\n            this.explicitProtocol = v;\n        }\n        callback(req, opts, fn) {\n            throw new Error('\"agent-base\" has no default implementation, you must subclass and override `callback()`');\n        }\n        /**\n         * Called by node-core's \"_http_client.js\" module when creating\n         * a new HTTP request with this Agent instance.\n         *\n         * @api public\n         */\n        addRequest(req, _opts) {\n            const ownOpts = Object.assign({}, _opts);\n            if (typeof ownOpts.secureEndpoint !== 'boolean') {\n                ownOpts.secureEndpoint = isSecureEndpoint();\n            }\n            // Set default `host` for HTTP to localhost\n            if (ownOpts.host == null) {\n                ownOpts.host = 'localhost';\n            }\n            // Set default `port` for HTTP if none was explicitly specified\n            if (ownOpts.port == null) {\n                ownOpts.port = ownOpts.secureEndpoint ? 443 : 80;\n            }\n            const opts = Object.assign(Object.assign({}, this.options), ownOpts);\n            if (opts.host && opts.path) {\n                // If both a `host` and `path` are specified then it's most likely the\n                // result of a `url.parse()` call... we need to remove the `path` portion so\n                // that `net.connect()` doesn't attempt to open that as a unix socket file.\n                delete opts.path;\n            }\n            delete opts.agent;\n            delete opts.hostname;\n            delete opts._defaultAgent;\n            delete opts.defaultPort;\n            delete opts.createConnection;\n            // Hint to use \"Connection: close\"\n            // XXX: non-documented `http` module API :(\n            req._last = true;\n            req.shouldKeepAlive = false;\n            // Create the `stream.Duplex` instance\n            let timedOut = false;\n            let timeout = null;\n            const timeoutMs = this.timeout;\n            const freeSocket = this.freeSocket;\n            function onerror(err) {\n                if (req._hadError)\n                    return;\n                req.emit('error', err);\n                // For Safety. Some additional errors might fire later on\n                // and we need to make sure we don't double-fire the error event.\n                req._hadError = true;\n            }\n            function ontimeout() {\n                timeout = null;\n                timedOut = true;\n                const err = new Error(`A \"socket\" was not created for HTTP request before ${timeoutMs}ms`);\n                err.code = 'ETIMEOUT';\n                onerror(err);\n            }\n            function callbackError(err) {\n                if (timedOut)\n                    return;\n                if (timeout !== null) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                onerror(err);\n            }\n            function onsocket(socket) {\n                let sock;\n                function onfree() {\n                    freeSocket(sock, opts);\n                }\n                if (timedOut)\n                    return;\n                if (timeout != null) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                if (isAgentBase(socket) || isHttpAgent(socket)) {\n                    // `socket` is actually an `http.Agent` instance, so\n                    // relinquish responsibility for this `req` to the Agent\n                    // from here on\n                    socket.addRequest(req, opts);\n                    return;\n                }\n                if (socket) {\n                    sock = socket;\n                    sock.on('free', onfree);\n                    req.onSocket(sock);\n                    return;\n                }\n                const err = new Error(`no Duplex stream was returned to agent-base for \\`${req.method} ${req.path}\\``);\n                onerror(err);\n            }\n            if (typeof this.callback !== 'function') {\n                onerror(new Error('`callback` is not defined'));\n                return;\n            }\n            if (!this.promisifiedCallback) {\n                if (this.callback.length >= 3) {\n                    // Legacy callback function - convert to a Promise\n                    this.promisifiedCallback = promisify_1.default(this.callback);\n                }\n                else {\n                    this.promisifiedCallback = this.callback;\n                }\n            }\n            if (typeof timeoutMs === 'number' && timeoutMs > 0) {\n                timeout = setTimeout(ontimeout, timeoutMs);\n            }\n            if ('port' in opts && typeof opts.port !== 'number') {\n                opts.port = Number(opts.port);\n            }\n            try {\n                Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);\n            }\n            catch (err) {\n                Promise.reject(err).catch(callbackError);\n            }\n        }\n        freeSocket(socket, opts) {\n            // TODO reuse sockets\n            socket.destroy();\n        }\n        destroy() { }\n    }\n    createAgent.Agent = Agent;\n})(createAgent || (createAgent = {}));\n// So that `instanceof` works correctly\ncreateAgent.prototype = createAgent.Agent.prototype;\nmodule.exports = createAgent;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/promisify.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/promisify.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction promisify(fn) {\n    return function (req, opts) {\n        return new Promise((resolve, reject) => {\n            fn.call(this, req, opts, (err, rtn) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(rtn);\n                }\n            });\n        });\n    };\n}\nexports[\"default\"] = promisify;\n//# sourceMappingURL=promisify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvbm9kZV9tb2R1bGVzL2FnZW50LWJhc2UvZGlzdC9zcmMvcHJvbWlzaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2R4dy1haS1sYW5ndWFnZS10ZWFjaGVyLy4vbm9kZV9tb2R1bGVzL2h0dHBzLXByb3h5LWFnZW50L25vZGVfbW9kdWxlcy9hZ2VudC1iYXNlL2Rpc3Qvc3JjL3Byb21pc2lmeS5qcz83YmJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gcHJvbWlzaWZ5KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZXEsIG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgcmVxLCBvcHRzLCAoZXJyLCBydG4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShydG4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcHJvbWlzaWZ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzaWZ5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/https-proxy-agent/node_modules/agent-base/dist/src/promisify.js\n");

/***/ })

};
;